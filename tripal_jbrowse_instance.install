<?php

function tripal_jbrowse_instance_schema() {
  $schema['tripal_jbrowse_instance'] = [
    'description' => t('Stores JBrowse links for features based on their organism configuration.'),
    'fields' => [
      'id' => ['type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE],
      'organism_id' => ['type' => 'int'],
      'title' => ['type' => 'varchar', 'length' => '255'],
      'link' => ['type' => 'varchar', 'length' => '255'],
      'tracks' => ['type' => 'varchar', 'length' => '255'],
      'description' => ['type' => 'text'],
      'show_in_organism_page' => [
        'type' => 'int',
        'default' => 0,
        'not null' => TRUE,
        'unsigned' => TRUE,
      ],
      'regexp' => [
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ],
    ],
    'unique keys' => [
      'organism_id' => ['organism_id'],
    ],
    'primary key' => ['id'],
  ];

  return $schema;
}

function tripal_jbrowse_instance_install() {
  tripal_jbrowse_instance_update_7100();
  tripal_jbrowse_instance_update_7101();
}

/**
 * Add the necessary terms to chado.
 */
function tripal_jbrowse_instance_update_7100() {
  tripal_insert_cvterm([
    'id' => 'operation:3208',
    'name' => 'genome_visualisation',
    'cv_name' => 'EDAM',
    'definition' => 'Visualise, format or render a nucleic acid sequence that is part of (and in context of) a complete genome sequence.',
  ]);
}

/**
 * Delete the old field genome_rendering
 */
function tripal_jbrowse_instance_update_7101() {
  field_delete_field('edam__genome_rendering');
}

/**
 *
 */
function tripal_jbrowse_instance_update_7102() {
  if (!db_field_exists('tripal_jbrowse_instance', 'regexp')) {
    $regexp = [
      'type' => 'varchar',
      'length' => '255',
      'not null' => FALSE,
    ];

    db_add_field('tripal_jbrowse_instance', 'regexp', $regexp);
  }
}